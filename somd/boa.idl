#ifndef boa_idl
#define boa_idl
#ifdef __PRIVATE__
#include <somref.idl>
#else
#include <somobj.idl>
#endif
#include <somdtype.idl>
#include <snglicls.idl>
interface SOMDObject;
interface Principal;
interface ImplementationDef;
interface InterfaceDef;
interface Context;
interface BOA :
#ifdef __PRIVATE__
	SOMRefObject
#else
	SOMObject
#endif
{
	SOMDObject create(in ReferenceData id,in InterfaceDef intf,in ImplementationDef impl);
	void dispose(in SOMDObject obj);
	ReferenceData get_id(in SOMDObject obj);
	Principal get_principal(in SOMDObject obj,in Environment req_ev);
	void set_exception(in exception_type major,in string userid,in void * param);
	void impl_is_ready(in ImplementationDef impl);
	void deactivate_impl(in ImplementationDef impl);
	void change_implementation(in SOMDObject obj,in ImplementationDef impl);
	void obj_is_ready(in SOMDObject obj,in ImplementationDef impl);
	void deactivate_obj(in SOMDObject obj);
#ifdef __SOMIDL__
	implementation
	{
		releaseorder : 
			create,
			dispose,
			get_id,
			change_implementation,
			get_principal,
			set_exception,
			impl_is_ready,
			deactivate_impl,
			obj_is_ready,
			deactivate_obj,
			private10,
			private11;
		callstyle = idl;
		metaclass = "SOMMSingleInstance";
		dllname = "somd.dll";
		majorversion = 2;
		minorversion = 2;
#ifdef __PRIVATE__
		functionprefix = "boa_";
	#ifdef SOMRefObject
		somInit : override;
		somUninit : override;
	#else
		somDefaultInit : override;
		somDestruct: override;
	#endif
#endif
	};
#endif /* __SOMIDL__ */
};
#endif /* boa_idl */
