/**************************************************************************
 *
 *  Copyright 2008, Roger Brown
 *
 *  This file is part of Roger Brown's Toolkit.
 *
 *  This program is free software: you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or (at your
 *  option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful, but WITHOUT
 *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 *  more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 */

/*
 * $Id$
 */

#ifndef containr_idl
#define containr_idl
#include <somobj.idl>

#ifdef __PRIVATE__
#include <somref.idl>
typedef SOMFOREIGN somir_containerData;
#pragma modifier somir_containerData: impctx=C;
#endif

#ifndef containd_idl
  interface Contained;
  typedef string Identifier;
#endif /* containd_idl */

interface Container :
#ifdef __PRIVATE__
	SOMRefObject
#else
	SOMObject
#endif
{
	typedef string InterfaceName;

	struct ContainerDescription
	{
		Contained contained_object;
		Identifier name;
		any value;
	};
	typedef sequence<Contained> ContainedSeq;
	ContainedSeq contents(in InterfaceName limit_type,in boolean exclude_inherited);
	ContainedSeq lookup_name(in Identifier search_name,in long levels_to_search,in InterfaceName limit_type,in boolean exclude_inherited);
	typedef sequence<ContainerDescription> ContainerDescriptionSeq;
	ContainerDescriptionSeq describe_contents(in InterfaceName limit_type,in boolean exclude_inherited,in long max_returned_objs);
#ifdef __SOMIDL__
#ifdef __PRIVATE__
	boolean seqContained_add(inout ContainedSeq seq,in Contained cnr);
	void seqContained_free(inout ContainedSeq seq);
#endif
	implementation
	{
#ifdef __PRIVATE__
		classinit: clsInit;
		containerData: nodata;
		somInit : override;
	#ifdef SOMRefObject
		somUninit : override;
	#else
		somDestruct: override;
	#endif
		somDumpSelf : override;
		somDumpSelfInt : override;
		functionprefix = "containr_";
/*		seqContained_add: procedure;
		seqContained_free: procedure;*/
#endif
        describe_contents: dual_owned_result;
		contents : caller_owns_result;
		lookup_name : 
			caller_owns_result,
			caller_owns_parameters="search_name";
		releaseorder : 
			contents,
			lookup_name,
			describe_contents,
			internalNameLookup,
			private1,
			private2,
			addToContents,
			removeFromContents,
			getContainerFixedPersistentSize,
			putContainerDataInFixedBuf,
			getContainerDataFromFixedBuf,
			_set_iidDirectory,
			_get_iidDirectory,
			saveContents,
			restoreContents,
			getContentsSize,
			deleteContainerFromIR,
			_get_dirdirtybit,
			_set_dirdirtybit,
			gatherSubclasses,
			_get_mycontents,
			_set_mycontents
#ifdef __PRIVATE__
			,seqContained_add
			,seqContained_free
#endif
			;
		callstyle = idl;
		majorversion = 2;
		minorversion = 1;
		filestem = containr;
		dllname = "somir.dll";
	};
#endif /* __SOMIDL__ */
};

#endif /* containr_idl */
